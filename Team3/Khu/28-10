Q1. Move Zeroes
//https://leetcode.com/problems/move-zeroes/


class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        
        int count=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0)
            {
                nums.erase(nums.begin()+i);
                count++;
                i--;
            }
        }
    while(count)
    {
        nums.push_back(0);
        
        count--;
    }
        
    }
};

Q2. pivot index
//https://leetcode.com/problems/find-pivot-index/

class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        int size=nums.size();
        int i,j,sum,sum2;
        int indx=size-1;
        int flag=0;
   
        sum=0;
        for(int i=0;i<size;i++)
            sum+=nums[i];
        for(int i=0;i<size;i++)
        {   sum2=0;
            for(int j=0;j<i;j++)
                   sum2+=nums[j];
            if(sum2==(sum-nums[i]-sum2))
            {
                if(i<=indx)
                {
                    indx=i;
                    flag=1;
                }
            }
        }
       if(flag==0)
           return -1;
        else return indx;
        
    }
};

Q3. Monotonic Array
//https://leetcode.com/problems/monotonic-array/

class Solution {
public:
    bool isMonotonic(vector<int>& A) {
        if(A.size()==1 || A.size()==0)
            return 1;
        
     int flag=0;
        for(int k=0;k<A.size()-1;k++)
        {   flag=0;
         
            if(A[k]>=A[k+1])
                flag=1;
         else break;
        }
        if(flag==1)
            return 1;
        for(int k=0;k<A.size()-1;k++)
        {   flag=0;
            if(A[k]<=A[k+1])
                flag=1;
         else break;
        }
        return flag;
        
    }
};

Q4. Product of array except self
//https://leetcode.com/problems/product-of-array-except-self/


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int>res;
        int n=nums.size();
        int Left[n],Right[n];
        Left[0]=1;
        Right[n-1]=1;
        for(int i=1;i<n;i++)
        {
            Left[i]=nums[i-1]*Left[i-1];
        }
        
      for(int i=n-2;i>=0;i--)
      {
          Right[i]=nums[i+1]*Right[i+1];
      }
        
        
        for(int j=0;j<n;j++)
        {
            res.push_back(Left[j]*Right[j]);
        }
        return res;
    }
};

