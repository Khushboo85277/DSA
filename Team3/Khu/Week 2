Q1. Odd Even LL
https://leetcode.com/problems/odd-even-linked-list/

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head==NULL)
            return nullptr;
        
        ListNode *odd,*even,*oh,*eh;
        oh=odd=head;
        eh=even=head->next;
        while(even && even->next)
        {  
        odd->next=odd->next->next;
            even->next=even->next->next;
            odd=odd->next;
            even=even->next;
        
        }
        odd->next=eh;
        return head;
    }
};

Q2.Reverse Linked List
//https://leetcode.com/problems/reverse-linked-list/

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        
        ListNode *r,*q,*p;
        r=q=NULL;
        p=head;
        while(p)
        {
            r=q;
            q=p;
            p=p->next;
            q->next=r;
            
        }
        head=q;
        
        return head;
    }
};


Q3. Palindrome LL

//



Q4. Intersection of Two LL

//https://leetcode.com/problems/intersection-of-two-linked-lists/

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        
        if(headA==NULL || headB==NULL)
            return NULL;
        
        
        int count1=0;
        int count2=0;
        ListNode *p,*q;
        p=headA;
        q=headB;
        while(p)
        {   count1++;
            p=p->next;
        }
        p=headA;
        while(q)
        {
            count2++;
            q=q->next;
        }
        q=headB;
        int diff=abs(count1-count2);
        if(count2>count1)
        {
            for(int i=0;i<diff;i++)
                q=q->next;
            
            while(p && q)
            {   if(p==q)
                    return p;
                p=p->next;
                q=q->next;
                
            }
            
        }
        else
        {
            for(int i=0;i<diff;i++)
                p=p->next;
            while( p && q)
            {   if(p==q)
                    return p;
                p=p->next;
                q=q->next;
                
            }
        }
        
      return NULL;  
        
        
    }
};


Q5. Middle of Linked List
//https://leetcode.com/problems/middle-of-the-linked-list/submissions/


class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        if(head==NULL)
            return NULL;
        
        ListNode *fast,*slow;
        fast=slow=head;
        while(fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
};



Q6. Sort List
//




Q7.convert binary number in LL to integer

//
